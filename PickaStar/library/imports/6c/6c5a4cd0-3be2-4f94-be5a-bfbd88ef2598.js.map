{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Star.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAG1C;IAAkC,wBAAY;IAD9C;QAAA,qEAsCC;QApCG,2BAA2B;QAE3B,gBAAU,GAAG,CAAC,CAAC;QAEf,aAAa;QACb,UAAI,GAAS,IAAI,CAAC;;IA+BtB,CAAC;IA7BG,gCAAiB,GAAjB;QACI,qBAAqB;QACrB,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC/C,iBAAiB;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR;QACI,kCAAkC;QAClC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QACzB,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACtB,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,qBAAM,GAAN,UAAO,EAAE;QACL,uBAAuB;QACvB,IAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAC;YAC1C,SAAS;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;SACnB;QAED,0BAA0B;QAC1B,IAAI,YAAY,GAAG,CAAC,GAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QAC/D,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC;IAjCD;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;4CACN;IAHE,IAAI;QADxB,OAAO;OACa,IAAI,CAqCxB;IAAD,WAAC;CArCD,AAqCC,CArCiC,EAAE,CAAC,SAAS,GAqC7C;kBArCoB,IAAI","file":"","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["import { Game } from \"./Game\";\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Star extends cc.Component{\r\n    // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n    @property(cc.Integer)\r\n    pickRadius = 0;\r\n\r\n    // 定义临时game组件\r\n    game: Game = null;\r\n\r\n    getPlayerDistance(){\r\n        // 根据 player 节点位置判断距离\r\n        let playerPos = this.game.player.getPosition();\r\n        // 根据两点位置计算两点之间距离\r\n        let dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    }\r\n\r\n    onPicked(){\r\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n        this.game.spawnNewStar();\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore();\r\n        // 然后销毁当前星星节点\r\n        this.node.destroy();\r\n    }\r\n\r\n    update(dt){\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if(this.getPlayerDistance() < this.pickRadius){\r\n            // 调用收集行为\r\n            this.onPicked();\r\n        }\r\n\r\n        // 根据 Game 脚本中的计时器更新星星的透明度\r\n        let opacityRatio = 1- this.game.timer / this.game.starDuration;\r\n        let minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity)); \r\n    }\r\n}"]}